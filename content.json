{"posts":[{"title":"Android Property参数简介","text":"在系统初始化时，Android将分配一块共享内存来存储property。这是在“init”守护进程中完成的，其源代码位于：device/system/init。“init”守护进程将启动PropertyService。 属性服务正在“init”守护进程中运行。每个想要设置属性的客户端都需要连接到属性服务并向属性服务发送消息。属性服务将在共享内存中更新/创建属性。任何想要获取属性的客户端都可以直接从共享内存中读取属性。这提高了读取性能。 属性服务启动后会从系统文件中读取默认的属性，并写入共享内存中，以下4个文件为按顺序读取： /default.prop /system/build.prop /system/default.prop /data/local.prop 后读入的属性将覆盖前面读取的相同的属性。 1234567#define PROP\\_PATH\\_RAMDISK\\_DEFAULT &quot;/default.prop&quot;#define PROP\\_PATH\\_SYSTEM\\_BUILD &quot;/system/build.prop&quot;#define PROP\\_PATH\\_SYSTEM\\_DEFAULT &quot;/system/default.prop&quot;#define PROP\\_PATH\\_LOCAL\\_OVERRIDE &quot;/data/local.prop&quot; 设置属性，ro.开头的属性将不能被更改属性值，persist.开头的属性会被永久纪录，其他属性值在重新开机后均将被丢弃 加载永久属性时，会读入在目录/data/property下所有名字以persist.开头的文件内容，作为该名字对应的属性值。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253int property_set(const char *name, const char *value){ if(namelen &lt; 1) return -1; pi = (prop_info*) __system_property_find(name); if(pi != 0) { /* ro.* properties may NEVER be modified once set */ if(!strncmp(name, &quot;ro.&quot;, 3)) return -1; pa = __system_property_area__; update_prop_info(pi, value, valuelen); pa-&gt;serial++; __futex_wake(&amp;pa-&gt;serial, INT32_MAX); } else { pa = __system_property_area__; if(pa-&gt;count == PA_COUNT_MAX) return -1; pi = pa_info_array + pa-&gt;count; pi-&gt;serial = (valuelen &lt;&lt; 24); memcpy(pi-&gt;name, name, namelen + 1); memcpy(pi-&gt;value, value, valuelen + 1); pa-&gt;toc[pa-&gt;count] = (namelen &lt;&lt; 24) | (((unsigned) pi) - ((unsigned) pa)); pa-&gt;count++; pa-&gt;serial++; __futex_wake(&amp;pa-&gt;serial, INT32_MAX); } /* If name starts with &quot;net.&quot; treat as a DNS property. */ if (strncmp(&quot;net.&quot;, name, strlen(&quot;net.&quot;)) == 0) { if (strcmp(&quot;net.change&quot;, name) == 0) { return 0; } /* * The 'net.change' property is a special property used track when any * 'net.*' property name is updated. It is _ONLY_ updated here. Its value * contains the last updated 'net.*' property. */ property_set(&quot;net.change&quot;, name); } else if (persistent_properties_loaded &amp;&amp; strncmp(&quot;persist.&quot;, name, strlen(&quot;persist.&quot;)) == 0) { /* * Don't write properties to disk until after we have read all default properties * to prevent them from being overwritten by default values. */ write_persistent_property(name, value); } property_changed(name, value); return 0;}","link":"/2023/11/30/ANDROID%20property%20%E5%8F%82%E6%95%B0%E7%AE%80%E4%BB%8B/"},{"title":"AudioTrack概述","text":"AudioTrack类用来管理、播放单个音频资源，它只能播放PCM数据，其他音频格式（aac、amr、opus、flac等）需要经过解码成PCM才能使用。 运行模式AudioTrack可以运行两种模式： 流模式静态模式 流模式 可以将连续的数据流写入AudioTrack,进行播放。播放音频数据块时，这种模式最有用。如： 声音持续的时间太长，无法容纳在内存中; 由于音频数据的特性（太大的采样率，每个采样的比特数…）而太大而无法容纳在内存中； 在播放先前排队的音频时收到或生成的声音。 静态模式 当处理很短的音频并且需要以最小延迟播放时，应该选择静态模式。对于经常播放的UI和游戏声音而言，静态模式将是首选方式，并且可能会产生最小的开销。 缓冲区 当创建AudioTrack时，AudioTrack将初始化其关联的音频缓冲区。在构造期间指定的此缓冲区大小决定了AudioTrack在数据用尽之前可以播放多长时间。 对于静态模式，此大小是可以从中播放的最大音频数据大小。 对于流模式，数据将以小于等于此缓冲区大小的块的形式写入音频接收器。 AudioTrack播放这里主要说一下AudioTrack的流模式使用。基本步骤 获取最小缓冲区大小（创建AudioTrack对象所需）；创建AudioTrack对象；调用AudioTrack play方法，开始播放。写入音频数据；停止播放释放对象。 1 获取最小缓冲区大小:::tipsint minSize = AudioTrack.getMinBufferSize(sampleRate, outChannelConfig, AudioFormat.ENCODING_PCM_16BIT);::: sampleRate：采样频率outChannelConfig：声道配置，CHANNEL_OUT_MONO、CHANNEL_OUT_STEREO。audioFormat：音频编码，AudioFormat.ENCODING_PCM_16BIT、ENCODING_PCM_8BIT. 2 初始化AudioTrack构造器已经过时，推荐使用AudioTrack.Builder进行创建AudioTrack对象。 :::tipsmTrack = new AudioTrack.Builder() .setAudioAttributes(new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build()) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(sampleRate) .setChannelMask(outChannelConfig) .build()) .setBufferSizeInBytes(minSize) .build();:::创建AudioTrack对象，同时设置采样率、声道数、音频格式，缓冲区大小。 3 开始播放调用play前，可以先向缓冲区写入音频数据。也可以后写。:::tipsmTrack.play();:::如果不限调用write,或者write数量不足，则调用play处于欠载状态，这种情况下不会播放。只有后续将数据写入，播放才会真正开始播放。 4 写入数据:::tipsmTrack.write(audioData.data, 0, size);::: 将音频数据写入音频接收器以进行播放。该方法默认情况是阻塞模式，直到所有数据都排入队列进行播放为止，并且将返回完整的传输计数。 但是，如果轨道在进入时停止或暂停，或者另一个线程通过调用停止或暂停来中断写入，或者在写入过程中发生I / O错误，则写入可能会返回较短的传输计数。 WRITE_BLOCKING：阻塞模式，写入将被阻塞，直到所有数据都已写入音频接收器为止。WRITE_NON_BLOCKING：非阻塞模式，在排队尽可能多的音频数据以进行播放而不会阻塞，写入将立即返回。 5 停止调用以下两种方法都可以停止播放，并且都可以恢复播放，停止时机略有不同。 1 停止播放音频数据，调用此方法后，音频将在播放了最后写入的缓冲区后停止播放。:::tipsmTrack.stop();::: 2 暂停音频数据的播放。 未播放的数据将不会被丢弃。 随后调用play将播放此数据。:::tipsmTrack.pause();::: 6 释放内存释放本地AudioRecord资源。调用release（）之后，将无法再使用该对象，并且应将引用设置为null。:::tipsmTrack.release();mTrack=null;:::","link":"/2023/11/30/AudioTrack%E6%A6%82%E8%BF%B0/"},{"title":"LEETCODE 1. 两数之和","text":"LEETCODE 1. 两数之和给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target 的那两个整数，并返回它们的数组下标。你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。你可以按任意顺序返回答案 1234e.g.输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 该题主要调查最简单的哈希表的概念和使用，或者两个for暴力枚举 哈希表如下： 1234567891011121314class Solution {public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) { unordered_map&lt;int,int&gt;hashtable; for(int i=0 ; i&lt;nums.size();++i){ auto it = hashtable.find(target-nums[i]); if(it != hashtable.end()){ return {it-&gt;second,i}; } hashtable[nums[i]] = i; } return{}; }};","link":"/2023/11/30/LEETCODE-1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"},{"title":"LEETCODE 2. 两数相加","text":"LEETCODE 2. 两数相加给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字 0 之外，这两个数都不会以 0 开头。 12345e.g.输入 l1 : 2-&gt;4-&gt;3 l2 : 5-&gt;6-&gt;4输出 l3 : 7-&gt;0-&gt;8解释 ：342 + 465 = 807 该题逐步分析 1、由于两个链表都是逆序存储，所以对应位置的数可以直接相加 2、对于目标 链表，需要设定头指针和尾指针来进行元素位移 3、两个给定列表位数不一定相同，所以每次相加时需要判断 tail 指针所指是否非空，若为空，则要在该位赋值为0 4、注意进位carry 123456789101112131415161718192021222324252627282930313233343536/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */class Solution {public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int carry = 0; ListNode *head = nullptr; ListNode *tail = nullptr; while(l1 || l2){ int n1 = l1? l1-&gt;val:0; int n2 = l2? l2-&gt;val:0; int sum = n1 + n2 + carry; carry = sum /10; if(!head) head = tail = new ListNode(sum % 10); else{ tail-&gt;next = new ListNode(sum % 10); tail = tail-&gt;next; } if(l1) l1 = l1-&gt;next; if(l2) l2 = l2-&gt;next; } if(carry &gt; 0) tail-&gt;next = new ListNode(1); return head; }};","link":"/2023/11/30/LEETCODE-2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"},{"title":"LEETCODE 3. 无重复字符的最长字串","text":"LEETCODE 3. 无重复字符的最长字串给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 12345678910111213e.g.输入: s = &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。 输入: s = &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。 输入: s = &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。 该题逐步分析 解决思路：滑动窗口 1、依次递增地枚举子串的起始位置，那么子串的结束位置也是递增的 2、可以指定双指针来定位字串的左右边界 3、无重复：右边界+1 有重复：左边界+1 12345678910111213141516171819class Solution {public: int lengthOfLongestSubstring(string s) { int n = s.size(); int head=0, tail=0,cur_length=0; while(tail &lt; n){ for(int i=head;i&lt;tail;i++){ if(s[i] == s[tail]){ head=i+1; break; } } cur_length=max(cur_length,tail-head+1); tail++; } return cur_length; }};","link":"/2023/11/30/LEETCODE-3.%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2/"},{"title":"MMU (个人化理解)","text":"MMU –memory managment unit 内存管理单元三点作用： 1、提供虚拟地址和物理地址的转换2、对内存中各个段的访问、读写权限管理3、虚拟内存，允许程序使用比物理内存更大的内存空间 Q1:为什么要引入虚拟内存？ 1、未引入虚拟内存时，所有进程直接访问物理地址，数据很容易被修改，不安全。引入虚拟内存后，实现了虚拟内存和物理内存的隔离，保障了安全性，隔离了程序，保护数据。2、系统的理论最大内存容量和CPU的位数有关。32位计算机理论上最高支持4GB内存。但实际生产中有时候用不到这么大的内存，比如只用了2GB内存，这时候浪费了2GB的寻址能力。使用虚拟内存后，在CPU的视角来看模拟出了一个更大的内存，从而提高了系统可用内存的大小。 Q2：如何实现对内存的权限管理 内存管理分用户层和kernel层kernel层，ARM11允许控制16个域，每个域可以设定不同的权限，（读，写，可执行）内存的访问权限受控于：域的权限+用户是否特权 域是节、大页和小页的集合。ARM结构支持16个域。对域的访问由域访问控制寄存器的两个位字段控制。因为每个字段对访问对应的域的使能非常迅速，所以整个存储器区间能很快地交换进出虚拟存储器。这里支持 2种域访问方式： 客户域的用户（执行程序，访问数据），被形成这个域的节或页来监督访问权限。管理者控制域的行为（域中的当前节和页，对域的访问），不被形成这个域的节或页来监督访问权限。一个程序可以是一些域的客户，也是另外一些域的管理者，同时没有对其它域的访问权限。这允许对程序访问不同存储器资源的非常灵活的存储器保护 Q3：MMU的使用 在kernel中进行make menuconfig ARCH=arm 进行配置 /*** 打开mmu功能 ***/CONFIG_MMU=y /*** 打开内存权限管理 **/STRICT_KERNEL_RWX =yARCH_HAS_STRICT_KERNEL_RWX=y Q4：页表转换 LINUX OS支持三层页表，但是ARM11 只支持两层页表，故在arm架构中，二级页表 == 三级页表","link":"/2023/11/30/MMU/"},{"title":"Makefile基本语法","text":"Makefile 通过 文件生成时间 来判断文件是否有被修改过 ， 进而判断文件是否需要重新编译 如果工程没有被编译过，则所有C文件编译并被链接 若工程中某几个文件被修改，则单独编译这几个文件，并重新链接 若头文件.h 被修改 Make 命令 执行流程： Make 会在当前目录下按顺序寻找GNUmakefile , makefile , Makefile 若未找到则报错，若找到 则把第一个目标作为最终目标 按照堆栈顺序，以此找到每一个目标文件，判断新旧，必要时重新生成目标文件，直到生成最终目标（可执行文件） 寻找过程中，若某个依赖不存在，则直接退出，报错 标号不会被关联到，必须通过命令行参数才能执行（如 clean） 若改变了源文件或头文件，相关联的目标文件都需要重新编译，直接输入make即可 .PHONY:表示伪目标，如clean,用.PHONY声明后，以后有了真的clean编译命令，也不会发生错误。（伪目标clean是清空，make clean ，需要命令行输入命令执行; 编译命令clean 是如main.c 一样的） Makefile 书写简化： 相同部分用引用代替 所有文件共同依赖的文件单独列出 其他目标文件只列出个性依赖 Makefile 设计方法 隐含规则2.生成多个文件 Makefile嵌套 使用变量 使用函数 1. 隐含规则（当 make -r 则禁止使用任何隐含规则）（例）自动扩展如main. : main.o foo.occ -o foo foo.o bar.omain依赖于foo.o,但是我们没有写foo.c生成foo.o 此时make会自动利用语法帮我们生成foo.o 2. 同时生成多个可执行文件这样可同时生成 P1 P2 P3三个可执行程序（ 当makefile 命令出错时，make 会直接中断返回，在命令前加上- ，则当这条命令报错时，可以让make忽略，继续执行下面的命令） 3. Makefile 嵌套执行@代表执行时“静悄悄”，不输出执行信息 4. 使用变量Makefile中可以使用变量，类似于C语言中的宏，但值可以修改变量大小写敏感变量名 不应包含 ：# = 或者空格使用变量时用$(var)的形式 变量的两种方式：（1） 递归展开变量使用“=”表示，可先使用，后定义（弊病：有可能递归定义，造成无限展开） （2） 简单展开变量使用“：=”表示，须先定义，再使用（：= 作用为 取当前赋值的上一个如：a = 3b = aa = 4则输出b的值为3） （3）系统环境变量 （4） 自动化变量 （5） 预定义变量 （6）函数","link":"/2023/11/30/Makefile%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"},{"title":"BootChart使用手顺","text":"BootChart是用于linux启动过程性能分析的开源软件工具，它可以在内核装载后就开始运行，记录各个程序启动占用的时间、CPU以及硬盘读写，直到系统启动完成为止。 STEP1kernel config中打开以下四个配置： CONFIG_PROC_FS=yCONFIG_SCHEDSTATS=yCONFIG_SCHED_DEBUG=yCONFIG_LATENCYTOP=y STEP2bootchart工程编译生成两个产物： bootchartd: 放在目录/sbin下bootchartd.conf :放在目录/etc下 STEP3修改uboot cmdline中，init=bootchartd STEP4重启机器，在/var/log 目录下生成 .svg 文件 注意事项:1、若系统开启selinux,需要考虑权限问题，不确定是否有影响可以先关闭selinux查看svg文件是否正常生成 2、必须保证/var目录有可写权限，一般嵌入式系统默认rootfs是ro,需修改其权限 3、若无法在系统命令行对cmdline修改，需要在step3中源码修改完cmdline后，单独烧录uboot。顺序必须为先将两个产物放入对应目录，再修改cmdline, 否则会导致init 查找不到/sbin/bootchard 导致crash","link":"/2023/11/30/bootchart%E4%BD%BF%E7%94%A8%E6%89%8B%E9%A1%BA/"},{"title":"莫言-《鳄鱼》","text":"《鳄鱼》分为四幕九场，讲述的是一位逃亡国外的腐败官员的故事。情节围绕腐败官员单无惮及其在生日派对上收到的贺礼“鳄鱼”展开：2005年无惮五十五岁生日时，做观赏鱼生意的商人老黑送他一条三十厘米长的小鳄鱼作为寿礼。了解到鳄鱼的生长取决于环境限制程度的特性，心事重重的无惮对鳄鱼产生了浓厚的兴趣。十年间，无惮身边各色人等粉墨登场，前妻巧玲欲与情人瘦马争夺无惮所居别墅的所有权；“外甥”牛布与行为艺术表演者灯罩一边从无惮身上榨取“艺术素材”，一边劝诱无惮加入他们的行列……无惮与鳄鱼越发亲近，觉得只有鳄鱼才能了解他的心声。他不断为鳄鱼更换更大的鱼缸，纵容着鳄鱼不断长大，直至成为长达四米的庞然巨兽。 故事内容和寓意没有太多的感触，情节的冲突性很少，个人感觉一般。但是对其之外的一个文章细节有所感悟。主人公无惮作为一个在逃贪官，在书中展现出的形象相比身边人反而是更爱国的，并且个人也是具有人格魅力的。这种矛盾感却能让人觉得很合理。无惮在短短的四幕话剧中，无数次提到了自己对故土的想念，以及自我嘲弄，一口一个愧对人民，不配当人。 他难道是真心的呢？ 无惮此刻身在美国，身边又都是同流之辈，完全没必要再去装给别人看，所以我倾向于他的这种情绪不是装的，但也不是真的，他不是真心觉得自己做错了，愧对人民和国家，如果让他再来一次，我相信他依然会选择当一个贪官。 无惮的这种行为，我的理解是 借用自嘲和自我贬低来企图减轻一点自己的罪恶感，同时又能获得道德精神上的崇高感。所有知道 “ 好 ” 而选择 “ 坏 ” 的人或多或少都如此。他用 “ 造桥让你们贪了，但是质量必须要好 ”这种故事来标榜自己是一个复杂的好官，用现在流行的形容词来说，他是一个表演型人格，但是他不演给其他人，而是演给自己。这是坏的不那么纯粹的人惯用的伎俩。他没有办法打心底里说出“人不为己，天诛地灭”，“我只管我自己舒服，他人与我何干”这种话，因为他知道对的东西长什么样，更清楚他就是不对。无惮是有内心世界的，他随时都在和自己对话，这种对话时刻折磨着他，也就是老话说的，良心的谴责。但也仅仅是自我满足一类的谴责罢了。没错，谴责也可以自我满足，你让他真回国接受审判，他是万万不肯的。这种性格的人，批评与谴责远比赞美更加来的让他心安。 这种人是很可悲的，他清楚知道自己的问题在哪，清楚知道自己想要什么，但是他永远也到不了。他被自己的表演型人格束缚住了，他甚至永远以为自己走在更加复杂，无奈却又正确的路上，他再也找不到 “ 真 ”了，对于他而言这远比其他事情来得更可悲。读过书，受过教育的人，思想上容易变得 “ 精致 ”，这种精致来源于读过书，又没读过很多书。他们的 “ 精致 ”更像是一种自以为是，口感好像劣质酒精夹杂着热塑料味儿， 尖锐又刺鼻。更可怕的是，这种三观一旦形成，是根深蒂固的。动人观念如刨人祖坟。他们自以为是，再听不见只言片语。 光提出问题不解决多少有点耍流氓的嫌疑。我的办法是，“ 真 ”一点，逼着自己纯粹一点，用他人之言来骂醒自己，让自己变成一个纯粹的人，不管好的还是坏的，都纯粹一点，不要把自己放在火堆上慢烤，拷上八十载，把生活过成人间炼狱。","link":"/2023/11/30/%E8%8E%AB%E8%A8%80-%E3%80%8A%E9%B3%84%E9%B1%BC%E3%80%8B/"},{"title":"D-Bus_介绍&amp;工具使用","text":"DBUS，数据总线，是一个低延迟，低开销，高可用性的ipc机制。在D-Bus中，“bus”是核心的概念，它是一个通道：不同的程序可以通过这个通道做些操作，比如方法调用、发送信号和监听特定的信号。在一台机器上总线守护有多个实例(instance)。这些总线之间都是相互独立的。 一、D-Bus简介 1、D-Bus简介D-Bus是Desktop Bus的缩写，是针对桌面环境优化的IPC(InterProcess Communication)机制，用于进程间的通信或进程与内核的通信。D-Bus是为Linux系统开发的进程间通信（IPC）和远程过程调用（RPC）机制，使用统一的通信协议来代替现有的各种IPC解决方案。D-Bus允许系统级进程（如：打印机和硬件驱动服务）和普通用户进程进行通信。D-Bus使用一个快速的二进制消息传递协议，D-Bus协议的低延迟和低消耗特点适用于同一台机器的通信。D-Bus的规范目前由freedesktop.org项目定义，可供所有团体使用。D-Bus不和低层的IPC直接竞争，比如sockets，shared memory或message queues。低层IPC有自己的特点，和D-Bus并不冲突。与其他重量级的进程间通信技术不同，D-Bus是非事务的。D-Bus使用了状态以及连接的概念，比UDP等底层消息传输协议更“聪明”。但另一方面，D-Bus传送的是离散消息，与TCP协议将数据看做“流”有所不同。D-Bus支持点对点的消息传递以及广播/订阅式的通信。 2、不同IPC通信方式比较不同IPC通信机制的特点如下： A、CORBA是用于面向对象编程中复杂IPC的一个强大的解决方案。B、Bonobo是一个只用于GNOME的解决方案，基于CORBA并依赖于GObject。C、DCOP是一个较轻量级的IPC框架，功能较少，但可以很好地集成到KDE桌面环境中。D、SOAP和XML-RPC设计用于Web服务，因而使用HTTP作为其传输协议。E、D-BUS设计用于桌面应用程序和OS通信。 3、D-Bus特性 A、D-BUS的协议是低延迟而且低开销的，设计小巧且高效，以便最小化传送时间。从设计上避免往返交互并允许异步操作。B、协议是二进制的，而不是文本，排除序列化过程。C、考虑了字节序问题。D、易用性：按照消息而不是字节流来工作，并且自动地处理了许多困难的IPC问题，并且D-Bus库以可以封装的方式来设计，开发者可以使用框架里存在的对象/类型系统，而不用学习一种新的专用于IPC的对象/类型系统。E、请求时启动服务以及安全策略。F、支持多语言（C/C++/Java/C#/Python/Ruby），多平台(Linux/windows/maemo)。G、采用C语言，而不是C++。H、由于基本上不用于internet上的IPC，因此对本地IPC进行了特别优化。I、提供服务注册，理论上可以进行无限扩展。 二、D-Bus架构1、D-Bus架构简介D-Bus是按一定的层次结构实现的，总体上D-Bus分为三层：A、接口层——接口层由libdbus库提供，进程通过libdbus库使用D-Bus的能力。通过底层库的接口可以实现两个进程之间进行连接并发送消息。B、总线层——由消息总线守护进程(message bus daemon )提供，消息总线守护进程是基于libdbus底层库的，可以路由消息。消息总线守护进程负责进程间的消息路由和传递，其中包括Linux内核和Linux桌面环境的消息传递。C、封装层——封装层是一系列基于特定应用程序框架的Wrapper库，将D-Bus底层接口封装成方便用户使用的通用API。 A、接口层——接口层由libdbus库提供，进程通过libdbus库使用D-Bus的能力。通过底层库的接口可以实现两个进程之间进行连接并发送消息。B、总线层——由消息总线守护进程(message bus daemon )提供，消息总线守护进程是基于libdbus底层库的，可以路由消息。消息总线守护进程负责进程间的消息路由和传递，其中包括Linux内核和Linux桌面环境的消息传递。C、封装层——封装层是一系列基于特定应用程序框架的Wrapper库，将D-Bus底层接口封装成方便用户使用的通用API。 2、D-Bus接口层libdbus只支持点对点的通信，即只支持一进程与另外的一个进程进行通信。通信是基于消息的，消息包含头部和消息体。libdbus提供C语言的底层API，API是为了将D-Bus绑定到特定的对象或是语言而设计的，官方文档中建议不要在应用上直接使用D-Bus的底层接口，推荐使用D-Bus的绑定，如QtDBus、GDBus、dbus-c++等实现。 3、D-Bus总线层D-Bus总线层由消息总线守护进程(message bus daemon )提供。消息总线守护进程是一个后台进程,是/usr/bin/dbus-daemon的一个运行实例, 负责消息的转发，dbus-daemon运行时会调用libdus的库。应用程序调用特定的应用程序框架的Wrapper库与dbus-daemon进行通信。应用程序通过D-Bus与其它进程通信必须先建立到消息总线守护进程实例的连接。最常见的基于dbus的程序也符合C/S结构。比如开发两个程序A和B，其中A是客户端，B是服务端。假设A要调用B的一个函数func，那么实际的消息流动方向是：A告诉dbus-daemon请求要调用B的func函数，然后dbus-daemon去调用B的func函数，如果func有返回值的话，B会把返回值告诉dbus-daemon，然后dbus- daemon再把返回值告诉A。如果B进程还没有启动，则dbus-daemon会自动的先把B进程启动起来。通常情况下，Linux会有两个dbus-daemon进程，一个属于system，一个属于session，在用户登录的时候由dbus-launch启动。大多数普通程序，都是使用session的dbus-daemon，默认情况下，A就是将消息发给属于session的dbus-daemon。dbus-daemon是有地址的，环境变量DBUS_SESSION_BUS_ADDRESS用于表示当前登录用户的session的dbus-daemon进程的地址，可以使用下面命令查看。 zyb@zyb:~$ echo $DBUS_SESSION_BUS_ADDRESSunix:abstract=/tmp/dbus-7BEdWvxPGx 当用户登录进桌面环境的时候，系统启动脚本会调用到dbus-launch来启动一个dbus-daemon进程，同时会把启动的dbus-daemon地址赋予环境变量DBUS_SESSION_BUS_ADDRESS。一般情况下，不需要考虑DBUS_SESSION_BUS_ADDRESS，但某些时候，单独启动一个dbus-daemon有助于程序的调试。利用dbus-daemon自启动机制运行的服务进程，都是后台进程，标准输出设备已经被重定向，如果B进程有一些调试用的打印信息输出，则很难直接查看。此时，可以单独启动一个dbus-daemon，让A和B都使用自己启动的dbus-daemon，此时，dbus-daemon能把B的打印信息显示出来。先在终端下启动一个dbus-daemon，命令如下形式如下： zyb@zyb:~$ DBUS_VERBOSE=1 dbus-daemon –session –print-addressunix:abstract=/tmp/dbus-uA3iIEfO1Z,guid=4c58483b0f9112cb98abd34062287954 如此启动的dbus-daemon会前台执行，并且打印出地址。然后，在执行A程序的时候，设置环境变量DBUS_SESSION_BUS_ADDRESS为刚才得到的地址值。 DBUS_SESSION_BUS_ADDRESS=unix:abstract=/tmp/dbus-uA3iIEfO1Z,guid=4c58483b0f9112cb98abd34062287954 ./A 此时运行程序A和B，使用自己启动的dbus-daemon来转发消息，并且会把B的打印信息显示出来。消息总线守护进程是一个特殊的进程，用于管理系统内的总线，可以将一个进程的消息路由给另外一个进程。如果有很多应用程序连接到消息总线守护进程的总线上，总线能把消息路由到对应的一个或多个进程中去。因此在总线层上，实现了点对点通信的支持，也实现了广播/订阅通信方式。在最底层，D-Bus只支持点对点的通信，一般使用本地套接字(AF_UNIX)在应用和消息总线守护进程之间通信。D-Bus的点对点是经过bus daemon抽象过的，由bus daemon来完成寻址和发送消息，因此每个应用不必关心要把消息发给哪个进程。 D-Bus发送消息通常包含如下步骤： A、应用程序创建和发送消息给消息总线守护进程。B、消息总线守护进程对收到的消息进行分发处理。C、目标程序接收到消息，然后根据消息的种类，做不同的响应：确认、应答、忽略。 总线是D-Bus的进程间通信机制，一个系统中通常存在多条总线，总线由D-Bus总线守护进程管理。最重要的总线为系统总线（System Bus），Linux内核引导时，系统总线就已被装入内存。只有Linux内核、Linux桌面环境和权限较高的程序才能向系统总线写入消息，以此保障系统安全性，防止有恶意进程假冒Linux发送消息。会话总线（Session Buses）由普通进程创建，可同时存在多条。会话总线属于某个进程私有，用于进程间传递消息。 4、D-Bus封装层D-Bus封装层是将libdbus底层API绑定到特定的对象系统或是语言中，將不便使用的libdbus底层API封裝成可以在应用层使用的高級API，如libdbus-glib、libdbus-qt等。D-Bus在很多不同的编程语言上都有其接口实现。不同语言的接口封装了D-Bus低级API，提供了更符合编程语言的语法结构。实现D-Bus接口的语言正在逐渐增加。在C语言中，有最底层的API，但其实现及使用上非常复杂。C语言中另一个实用化的实现基于GLib。在Java、Perl、Python等都有D-Bus接口实现。 三、D-Bus术语1、D-Bus术语简介总线是消息总线守护进程(message bus daemon)的运行实例，每个总线都有一个地址，应用进程就是通过总线地址和相应的总线连接的。总线上的每一个连接都有一个连接名，连接名也称bus name。每个连接上有至少一个对象，通常有多个对象，对象使用对象路径唯一标识。对象要实现一个或多个接口，每个接口包含一组方法和信号。 2、总线（Bus）在D-Bus中，总线(bus)是核心的概念：不同的程序可以通过总线进行某些操作，比如方法调用、发送信号和监听特定的信号。总线通常有两种，系统总线(system bus)和会话总线(session bus)，系统总线通常只有一条，用户总线在用户登录时创建。系统总线是一个持久的总线，在系统启动时就创建，供系统内核和后台进程使用，具有较高的安全性。系统总线最常用是发送系统消息，比如：插入一个新的存储设备、有新的网络连接等。会话总线是在某个用户登录后启动，属于某个用户私有，是某用户的应用程序用来通话的通道。在很多嵌入式系统中，只有一个用户ID登录运行，因此只有一个会话总线。一条消息总线就是一个消息路由器，是消息总线守护进程(message bus daemon)的一个实例。 3、地址(Address)使用d-bus的应用程序既可以是server端也可以是client端，server端监听到来的连接，client端连接到server端，一旦连接建立，消息就可以流转。如果使用dbus daemon，所有的应用程序都是client端，dbus daemon监听所有的连接，应用程序初始化连接到dbus daemon。每一条总线都有一个地址，进程通过总线的地址连接到总线上。一个D-Bus的地址是指server端用于监听，client端将要连接的地方，例如unix:path=/tmp/abcedf标识server端将在路径/tmp/abcedf的UNIX domain socket监听，client端将要连接到这个地址。地址可以是指定的TCP/IP socket或者其他在或者将在D-Bus协议中定义的传输方式。如果使用bus daemon，libdbus将通过读取环境变量DBUS_SESSION_BUS_ADDRESS自动获取session bus damon的地址，通过检查一个指定的UNIX domain socket路径获取system bus的地址。如果使用D-bus，但不是daemon，需要定义哪个应用是server端，哪个是client端，并定义一套机制用于认可server端的地址。 4、连接名(Bus Name)总线上的每个连接都有一个或多个名字。当连接建立以后，D-Bus 服务会分配一个不可改变的连接名，称为唯一连接名(unique connection name)，唯一连接名即使在进程结束后也不会再被其他进程所使用。唯一连接名以冒号开头，如“:34-907”。但唯一连接名总是临时分配，无法确定，也难以记忆，因此应用可以要求有另外一个名字公共名(well-known name)来对应唯一连接名。例如可以使用“com.mycompany”来映射“:34-907”。应用程序可能会要求拥有额外的公共名(well-known name)。例如，可以写一个规范来定义一个名字叫做 com.mycompany.TextEditor。协议可以指定自己拥有名字为com.mycompany.TextEditor的连接，一个路径为/com/mycompany/TextFileManager的对象，对象拥有接口org.freedesktop.FileHandler。应用程序就可以发送消息到总线上的连接名字，对象和接口以执行方法调用。 连接名可以用于跟踪应用程序的生命周期。当应用退出（或者崩溃）时，与总线的连接将被OS内核关掉，总线将会发送通知，告诉剩余的应用程序。 5、对象和对象路径(Object and Object Path)D-Bus的对象和面向对象语言中的对象含义是不同的，D-Bus的对象表示的是D-Bus通道中信息流向的端点。对象由客户进程创建，并在连接进程中保持不变。所有使用D-BUS的应用程序都包含一些对象, 当经由一个D-BUS连接收到一条消息时，消息是被发往一个对象而不是整个应用程序。应用程序框架中定义了这样的对象，如GObject，QObject等，在D-Bus中称为原生对象（native object）。对于底层的D-Bus协议，即libdbus API，并不理会原生对象，使用对象路径(object path)的概念。通过对象路径，高层API接口可以绑定到对象，允许远程应用指向对象。对象路径如同文件系统路径，例如一个对象可能叫做“/org/kde/kspread/sheets/3/cells/4/5”。对象路径在全局（session或者system）是唯一的，用于消息的路由。 6、接口（Interface）每一个对象支持一个或者多个接口，接口是一组方法和信号的集和，接口定义一个对象实体的类型。D-Bus对接口的命名方式，类似org.freedesktop.Introspectable。开发人员通常使用编程语言名字作为接口名字。 7、方法(Methods)每一个对象有两类成员：方法和信号。方法是一段函数代码，带有输入和输出；信号是广播给所有兴趣的其他实体，信号可以带有数据payload。 客户向某对象发送一个请求，即对象被请求执行一个明确的、有名称的动作。如果客户请求执行一个目标对象未提供的方法，将会产生一个错误。方法的定义可以支持输入参数。对于每个请求，都有一个包含请求结果以及结果数据(输出参数)的响应返回给请求者。当请求无法完成时，响应中将包含异常信息，其中至少有异常名称以及错误信息。大多数语言都将这些封装在自身的语言机制中，比如将参数包装进消息包，将异常信息转换成语言自身的异常等等。在这些实现中，向远程对象传递一个字符串参数就好像是在本地执行一个字符串参数的函数一样简单。此时不再需要数据类型转换、数据复制等繁琐工作，语言本身封装了一切底层实现。 8、信号(Signals)信号依然遵从面向对象概念，信号是从对象发出但没有特定目的地址的单向数据广播。客户进程可以预先注册其感兴趣的信号，如特定名称的信号或从某个对象发出的信号等。当对象发出信号后，所有订阅了该信号的客户进程将收到此信号的复本。接收端可能有多种情况出现，或者有一个客户进程，或者有多个客户进程，或者根本没有客户进程对这个信号感兴趣。对于信号来说没有响应消息，发出信号的对象不会知道是不是有客户进程在接收，有多少客户进程接收，以及从客户进程收到任何反馈。信号可以有参数。但信号是单向通信，因此不可能像方法一样具有输入输出参数。D-Bus允许客户进程通过参数比对过滤其需要的信号。信号一般用来广播一些客户可能会感兴趣的事件，比如某个其它的客户进程与总线的连接断开等。这些信号来自总线对象，因此从信号中客户进程可以分辨断线是由于正常退出、被杀掉或者程序崩溃。 9、代理(Proxies)代理对象用来表示其他的remote object。当触发了proxy对象的method时，将会在D-Bus上发送一个method_call的消息，并等待答复，根据答复返回。总线上的对象一般通过代理来访问。总线上的对象位于客户进程以外，而客户可以调用本地接口与对象通信，此时，本地接口充当了代理的角色。当触发了代理对象的方法时，将会在D-Bus上发送一个method_call的消息，并等待答复返回，就象使用一个本地对象一样。一些语言的代理支持“断线重连”。比如所连接的对象在某段时间里暂时断开了与总线的连接，代理会自动重连到相同的连接名并重新找到对象，程序甚至不会知道目标对象有段时间不可用。并不是所有的语言都支持这一特性，在GLib中的两种代理中的一种支持。比如不用代理时的代码如下： 123456789Message message = new Message(&quot;/remote/object/path&quot;, &quot;MethodName&quot;, arg1, arg2); Connection connection = getBusConnection(); connection.send(message); Message reply = connection.waitForReply(message); if (reply.isError()) { }else { Object returnValue = reply.getReturnValue(); } 采用代理时对应的代码则是： 12Proxy proxy = new Proxy(getBusConnection(), &quot;/remote/object/path&quot;); Object returnValue = proxy.MethodName(arg1, arg2); 10、服务服务是 D-BUS 的最高层次抽象，服务的实现当前还在不断发展变化。应用程序可以通过一个总线来注册一个服务，如果成功，则应用程序就已经获得了服务。其他应用程序可以检查在总线上是否已经存在一个特定的服务，如果没有可以要求总线启动它。当通过总线进行通信时，应用程序会获取服务名称。服务名称是应用程序如何选择同一总线上的其他应用程序的依据。服务名称由总线守护进程进行代理，用于将消息从一个应用程序路由到另一个应用程序。服务名称的类似概念是IP地址和主机名：计算机通常具有一个IP地址，并且根据其向网络提供的服务，可以具有与之相关联的一个或多个主机名。另一方面，如果不使用总线，服务名称也不会使用。如果再将它与计算机网络进行比较，这将等同于点到点网络：因为对等方是已知的，所以不需要使用主机名来查找它或它的IP地址。总线服务名称的格式实际上与主机名非常相似：它是字母和数字的点分隔序列。常见的做法是根据服务定义的组织的域名来命名自己的服务名称。例如，D-Bus服务由freedesktop.org定义，可以使用org.freedesktop.DBus服务名称在总线上找到它。 四、消息和消息总线1、消息简介D-Bus通信机制是通过进程间发送消息实现的，最基本的D-Bus协议是一对一的通信协议。与socket通信不同，D-Bus是面向消息的协议。但如果使用高层的绑定接口，不会直接接触到D-Bus的消息。D-Bus 有四种类型的消息： A、method_call方法调用B、method_return方法返回C、error错误D、signal信号 代理中的远程对象调用涉及到了消息总线以及method_call和method_return两类消息。消息有消息头(header)和消息体(body)。消息头包含消息体的路由信息，消息体是净荷，通常包含的是参数。消息头通常包含发送进程的连接名(Bus Name)、方法或者信号名等等，其中有一字段是用于描述消息体中的参数的类型的，例如“i”标识32位整数，“ii”表示2个32位整数。 2、调用method的流程进程A要调用进程B的一个method，进程A发送method_call消息到进程B，进程B回复method_return消息。在发送消息时，发送方会在消息中添加不同的序列号，同样，回复消息中也会含有序列号，以便对应。 调用method的流程如下： A、在发送method_call消息时，如果使用了代理，进程A要调用进程B的某方法，不用构造method_call消息，只需调用代理的本地方法，代理会自动生成method_call消息发送到消息总线上。B、如果使用底层API，进程A需要构造一个method_call消息。method_call消息包含对应进程B的连接名、方法名、方法所需参数、进程B中的对象路径和进程B中声明此方法的接口。C、将method_call消息发送到消息总线上。D、信息总线检查消息头中的目的连接名，当找到一个进程与此连接名对应时发送消息到该进程。当找不到一个进程与此连接名对应时，返回给进程A一个error消息。E、进程B解析消息，如果是采用底层API方式，则直接调用方法，然后发宋应答消息到消息总线。如果是D-BUs高级API接口，会先检测对象路径、接口、方法名称，然后把消息转换成对应的本地对象（如GObject，QT中的QObject等）的方法，调用本地对象方法后再将应答结果转换成应答消息发给消息总线。F、消息总线接收到method_return消息，将把method_return消息直接发给发出调用消息的进程。消息总线不会对总线上的消息进行重排序。如果发送了两条消息到同一个进程，将按照发送顺序接 收到。接收进程不需要按照顺序发出应答消息，例如在多线程中处理这些消息，应答消息的发出是没有顺序的。消息都有一个序列号可以与应答消息进行配对。 3、发送signal的流程发送信号是单向广播的，信号的发送者不知道对信号作响应的有哪些进程，所以信号发送是没有返回值的。信号接收者通过向消息总线注册匹配规则来表示对某信号感兴趣，而匹配规则通常包含信号的发出者和信号名。信号发送的流程如下： A、当使用dbus底层接口时，信号需要应用进程自己创建和发送到消息总线；使用dbus高层API接口时，可以使用相关对象进行发送。信号消息包含有声明信号的接口名、信号名、所在进程对应的连接名和相关参数。B、连接到消息总线上的进程如果对某个信号感兴趣，则注册相应的匹配规则。消息总线保持有匹配规则表。C、消息总线根据匹配规则表，将信号发送到对信号感兴趣的进程。D、每个进程收到信号后，如果使用dbus高级API接口，可以选择触发代理对象上的信号。如果使用dbus底层接口，需要检查发送者名称和信号名称，然后决定怎么做。 4、DBus工具D-Bus提供了两个小工具：dbus-send 和dbus-monitor。可以用dbus-send发送消息，用dbus-monitor监视通道上流动的消息。 dbus-send用于发送一个消息到消息通道上，使用格式如下： dbus-send [–system | –session] –type=TYPE –print-reply –dest=连接名对象路径接口名.方法名参数类型:参数值参数类型:参数值dbus-send –session –type=method_call –print-reply –dest=连接名对象路径接口名.方法名 参数类型:参数值 参数类型:参数值 dbus-send支持的参数类型包括：string, int32, uint32, double, byte, boolean。 dbus-monitor用于打印消息通道上的消息，使用格式如下： dbus-monitor [–system | –session | –address ADDRESS] [–profile | –monitor] [watch expressions]dbus-monitor “type=’signal’, sender=’org.gnome.TypingMonitor’, interface=’org.gnome.TypingMonitor’” 5、消息总线上的方法和信号消息总线是一个特殊的应用，主要关于消息总线上的方法和信号。 A、Introspection 消息总线上有一个接口org.freedesktop.DBus.Introspectable，接口中声明了一个方法Introspect，不带参数，将返回一个XML string，XML字符串描述接口、方法、信号。 B、消息总线上的方法和信号可以通过向名称为“org.freedesktop.DBus”的连接上的对象“/”发送消息来调用消息总线提供的方法。消息总线对象支持标准接口”org.freedesktop.DBus.Introspectable”，可以调用org.freedesktop.DBus.Introspectable.Introspect方法查看消息总线对象支持的接口。 dbus-send –session –type=method_call –print-reply –dest=org.freedesktop.DBus / org.freedesktop.DBus.Introspectable.Introspect 用户总线对象支持标准接口“org.freedesktop.DBus.Introspectable”和接口“org.freedesktop.DBus”。接口“org.freedesktop.DBus”有18个方法和3个信号。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;interface name=&quot;org.freedesktop.DBus&quot;&gt; &lt;method name=&quot;Hello&quot;&gt; &lt;arg direction=&quot;out&quot; type=&quot;s&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;RequestName&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;in&quot; type=&quot;u&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;u&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;ReleaseName&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;u&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;StartServiceByName&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;in&quot; type=&quot;u&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;u&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;UpdateActivationEnvironment&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;a{ss}&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;NameHasOwner&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;b&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;ListNames&quot;&gt; &lt;arg direction=&quot;out&quot; type=&quot;as&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;ListActivatableNames&quot;&gt; &lt;arg direction=&quot;out&quot; type=&quot;as&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;AddMatch&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;RemoveMatch&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;GetNameOwner&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;s&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;ListQueuedOwners&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;as&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;GetConnectionUnixUser&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;u&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;GetConnectionUnixProcessID&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;u&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;GetAdtAuditSessionData&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;ay&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;GetConnectionSELinuxSecurityContext&quot;&gt; &lt;arg direction=&quot;in&quot; type=&quot;s&quot;/&gt; &lt;arg direction=&quot;out&quot; type=&quot;ay&quot;/&gt; &lt;/method&gt; &lt;method name=&quot;ReloadConfig&quot;&gt; &lt;/method&gt; &lt;method name=&quot;GetId&quot;&gt; &lt;arg direction=&quot;out&quot; type=&quot;s&quot;/&gt; &lt;/method&gt; &lt;signal name=&quot;NameOwnerChanged&quot;&gt; &lt;arg type=&quot;s&quot;/&gt; &lt;arg type=&quot;s&quot;/&gt; &lt;arg type=&quot;s&quot;/&gt; &lt;/signal&gt; &lt;signal name=&quot;NameLost&quot;&gt; &lt;arg type=&quot;s&quot;/&gt; &lt;/signal&gt; &lt;signal name=&quot;NameAcquired&quot;&gt; &lt;arg type=&quot;s&quot;/&gt; &lt;/signal&gt;&lt;/interface&gt;&lt;interface name=&quot;org.freedesktop.DBus.Introspectable&quot;&gt; &lt;method name=&quot;Introspect&quot;&gt; &lt;arg direction=&quot;out&quot; type=&quot;s&quot;/&gt; &lt;/method&gt;&lt;/interface&gt;","link":"/2023/11/30/D-Bus%20%E4%BB%8B%E7%BB%8D&%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"title":"提问的智慧（How To Ask Questions The Smart Way）","text":"对于程序员来说，提问的方式往往和解决方法同样重要，一个准确，详实，有准备的问题往往能更快地得到他人的帮助此处转载一篇关于如何提问的经典文章，在我学习过程中使我受益良多Copyright © 2001,2006,2014 Eric S. Raymond, Rick Moen英文原版 ： http://www.catb.org/~esr/faqs/smart-questions.html繁体中文版 ： https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README.md 声明许多项目在他们网站的帮助文档中链接了本指南。这很好，这正是我们想要的用途。但如果你是该项目管理员并试图创建指向本指南的超链接，请在超链接附近的显著位置注明： 本指南不提供此项目的实际支持服务！ 我们已经深刻领教到缺少上述声明所带来的痛苦：我们将不停地被那些认为发布这本指南就意味着有责任解决世上所有技术问题的傻瓜苦苦纠缠。 如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些傻瓜之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。 简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确地提问以获得你满意的答案。 现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件好事；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。 首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。 尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。 我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。 我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们认可这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们只为那些真正有兴趣并愿意积极参与问题解决的人调整回答问题的风格。这点不会变，也不该变：否则，我们就是在最擅长的事情上降低效率。 我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）的问题。 如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。 所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。 如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。 （欢迎对本指南提出改进意见。你可以把你的建议发送至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。 在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情： 尝试在你准备提问的论坛的旧文章中搜索答案。 尝试上网搜索以找到答案。 尝试阅读手册以找到答案。 尝试阅读常见问题文件（FAQ）以找到答案。 尝试自己检查或试验以找到答案。 向你身边的强者朋友打听以找到答案。 如果你是程序开发者，请尝试阅读源代码以找到答案。 当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。 运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 Google 论坛和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。 别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐得舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。 准备好你的问题，再将问题仔细地思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。 小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。 绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。 另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。 当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者： 在与主题不合的论坛上贴出你的问题。 在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。 在太多的不同新闻群组上重复转贴同样的问题（cross-post）。 向既非熟人也没有义务解决你问题的人发送私人电邮。 黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。 因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。 向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。 在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。 别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。 搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。 一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。 可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。 Stack Overflow搜索，然后在 Stack Exchange 问。 近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。 因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。 如果你还是找不到任何对你的问题有用的内容，请把你的问题发在与它最相关的网站上。提问的时候请善用格式化工具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语言、操作系统或库/包的名称）。当有人要求你提供更多相关信息时，请编辑你的贴子来补充它们[译注：而不是发一个回帖或回答！]。如果你觉得一个答案对你有帮助，点击向上的箭头来为它投票；如果一个答案提供了问题的正确解决方案，点击投票按钮下方的对勾来将它标记为正解。 Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站： Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。 Stack Overflow 是问写程序有关的问题。 Server Fault 是问服务器和网管相关的问题。 网站和 IRC 论坛本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。 事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用我们的版本”。 在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。 通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。 在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。 第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法： 任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。 向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。 大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。 如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。 如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。 然而，如果你确信你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意） 如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。 使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。 一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。 蠢问题：救命啊！我的笔记本电脑不能正常显示了！ 聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。 更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。 编写目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标指针或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。 总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。 如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。 对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。 仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。 在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。 使问题容易回复以请将你的回复发送到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。 在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。 使用清晰、正确、精准且合乎语法的语句我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。 正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。 正确地拼写、使用标点和大小写，不要将its混淆为it's，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行）。 更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通信中的简写或火星文，如将的简化为d会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。 如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。 如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用] English is not my native language; please excuse typing errors. 英文不是我的母语，请原谅我的错字或语法。 If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question. 如果你说某语言，请向我发电邮/私信； 我需要有人协助我翻译我的问题。 I am familiar with the technical terms,but some slang expressions and idioms are difficult for me. 我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。 I’ve posted my question in $LANGUAGE and English.I’ll be glad to translate responses, if you only use one or the other. 我把我的问题用某语言和英文写出来。 如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。 使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以： 使用纯文字而不是 HTML (关闭 HTML 并不难）。 使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。 不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。 但是，对一些特殊的文件不要设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。 在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。 绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。 如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。 在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。 如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。 精确地描述问题并言之有物 仔细、清楚地描述你的问题或 Bug 的症状。 描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。 描述在提问前你是怎样去研究和理解这个问题的。 描述在提问前为确定问题而采取的诊断步骤。 描述最近做过什么可能相关的硬件或软件变更。 尽可能地提供一个可以重现这个问题的可控环境的方法。 尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。 以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。 Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。 话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。 这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。 别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。 请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。 编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。 提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。 低声下气不能代替你的功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。 别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。 有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。 描述问题症状而非你的猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。 蠢问题 我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？ 聪明问题 我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下… 由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方地展示给我们看吧！ 按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。 如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。 如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。 描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。 经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。 蠢问题 我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？ 聪明问题 我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。 第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。 别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。 当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。 这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。 清楚明确地表达你的问题以及需求漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。 如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。 要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。 所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有用的答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好地理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。 询问有关代码的问题时如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;比较有可能让你得到回应。 最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看话不在多而在精一节）。 一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做是一个好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。 如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。 别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。 如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的用户邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的用户也许仍会给你一些提示。 去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。 首先：如果你对问题的描述不是很好，这样问更是画蛇添足。 其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。 一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。 即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。 有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。 当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛茸茸的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。 如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。 礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。 坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的） 然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。 （我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。） 问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。 最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X有趣），因此可以利用此时间去解决其它问题。 补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。 对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。 除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。 至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。 思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。 在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。 如何解读答案 RTFM 和 STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM（Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。 RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 **Google 是你的朋友**！） 在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。 通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为： 你需要的信息非常容易获得； 你自己去搜索这些信息比灌给你，能让你学到更多。 你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。 如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。 比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？ 处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。 如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。 另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。 （有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。） Jeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。 在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。 如何避免扮演失败者在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。 这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被言语攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做： 熬过去，这很正常。事实上，它是有益健康且合理的。 社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。 也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。 夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。 记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。 有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。 这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。 也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。 不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的： 问题：我能在哪找到 X 程序或 X 资源？ 问题：我怎样用 X 做 Y？ 问题：如何设定我的 shell 提示？ 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？ 问题：我的程序/设定/SQL 语句没有用 问题：我的 Windows 电脑有问题，你能帮我吗？ 问题：我的程序不会动了，我认为系统工具 X 有问题 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 问题：我能在哪找到 X 程序或 X 资源？ 回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？ 问题：我怎样用 X 做 Y？ 回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。 问题：如何设定我的 shell 提示？？ 回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。 问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？ 回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。 问题：我的{程序/设定/SQL 语句}没有用 回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种 你还有什么要补充的吗？ 真糟糕，希望你能搞定。 这关我屁事？ 问题：我的 Windows 电脑有问题，你能帮我吗？ 回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。 注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。 问题：我的程序不会动了，我认为系统工具 X 有问题 回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。 问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？ 回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到用户群组的清单）。 注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。 问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？ 回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！ 好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。 蠢问题： 我可以在哪儿找到关于 Foonly Flurbamatic 的资料？ 这种问法无非想得到 STFW 这样的回答。 聪明问题： 我用 Google 搜索过 “Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？ 这个问题已经 STFW 过了，看起来他真的遇到了麻烦。 蠢问题： 我从 foo 项目找来的源码没法编译。它怎么这么烂？ 他觉得都是别人的错，这个傲慢自大的提问者。 聪明问题： foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？ 提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。 蠢问题： 我的主机板有问题了，谁来帮我？ 某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。 聪明问题： 我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？ 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。 在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。 事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。 通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。 事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。 黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。 如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。 总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。 你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。 有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。 另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。 对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。 如何更好地回答问题态度和善一点。 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。 对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。 如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。 如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。 试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。 尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。 如果你决定回答，就请给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。 正面地回答问题！ 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。 帮助你的社区从问题中学习。 当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。 如果你在研究一番后才作出了回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。 相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。 当你发布软件或补丁时，试着按软件发布实践操作。 鸣谢Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。 2","link":"/2023/11/30/%E5%A6%82%E4%BD%95%E6%8F%90%E9%97%AE/"}],"tags":[],"categories":[{"name":"Android技术","slug":"Android技术","link":"/categories/Android%E6%8A%80%E6%9C%AF/"},{"name":"LeetCode","slug":"LeetCode","link":"/categories/LeetCode/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"工作记录","slug":"工作记录","link":"/categories/%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"},{"name":"读书","slug":"读书","link":"/categories/%E8%AF%BB%E4%B9%A6/"},{"name":"文章分享","slug":"文章分享","link":"/categories/%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/"}],"pages":[{"title":"categories","text":"","link":"/categories/index.html"}]}